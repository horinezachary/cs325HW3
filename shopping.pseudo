function shopping(W, weights[], values[], n){
  int V[n+1][W+1];
  bool K[n+1][W+1];

  for (int i = 0 to n){  //step through Items
    for (int w = 0 to W){ //increase weight until max weight
      if (i == 0 || w == 0){
        V[i][w] = 0;
      }
      //if the weight in the last value is lower than the current max, find the max and keep it
      else if (weights[i-1] <= w){
        V[i][w] = max((V[i-1][w]) or (values[i-1] + V[i-1][w-weights[i-1]]));
        K[i][w] = 1;
      }
      //otherwise, set the current same as the last, and don't keep it
      else {
        V[i][w] = V[i-1][w];
        K[i][w] = 0;
      }
    }
  }
  //walk back through and compile path list
  int res = V[n][W];
  int k = W;
  //step through the list until there either are no more items or the total has been reached
  for (int i = n; i > 0 && res > 0; i--){
    if (!(res == V[i-1][k])){
      output i;
      res = res - values[i-1];
      k = k-weights[i-1];
    }
  }
}

function main(numItems, itemWeights[], itemValues[], familySize, familyWeights[]){
  for (i = 1 to familySize){  //for each family member, run the knapsack problem
    shopping(familyWeights[i], itemWeights[], itemValues[], numItems);
  }
}
